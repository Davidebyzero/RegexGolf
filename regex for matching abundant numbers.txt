(?# Match abundant numbers in the domain ^x*$ using only the ECMAScript subset of regex functionality. )
(?# N = main number )
^
(?# Capture the largest prime factor of N, and the largest power of that factor that is also a factor of N. Note that the
    algorithm used will fail if N itself is a prime power, but that's fine, because prime powers are never abundant. )
(?=
    (?:                              (?# Repeatedly divide current number by its smallest factor )
        (?=(xx+?)\1+$)
        (x+)\2*(?=\2$)
    )+                               (?# A "+" is intentionally used instead of a "*", to fail if N is prime. This saves the rest
                                         of the regex from having to do needless work, because prime numbers are never abundant. )
    (?!\1+$)                         (?# require that the last factor divided out is a different prime )
    (?=(x(x+?))\3*$)                 (?# \3 = the largest prime factor of N; \4 = \3-1 )
    (x(x+))                          (?# \5 = the largest power of \3 that is a factor of N; \6 = \5-1 )
)
(?# We want to capture \5 + \5/\3 + \5/\3^2 + ... + \3^2 + \3 + 1 = {\5 * \3 - 1} / {\3 - 1}, but
    in case \5 * \3 > N we need to calculate it as {\5 - 1} / {\3 - 1} * \3 + 1. )
(?# The following division will fail if \5 == N, but that's fine, because no prime power is abundant. )
(?=
    (x(x*))                          (?# \7 = {\5 - 1} / \4; \8 = \7-1 )
    .*(?=\6$)
    (?# it is guaranteed that either \7 > \4 or \7 == 1, which allows the following division-by-multiplication to work )
    .*(?=\7*$)
    \4\8+$
)
(?=
    .*(x(                            (?# \9 = 1 + \7 * \3  =  {\5 - 1} / {\3 - 1} * \3 + 1;  \10 = \9-1 )
        (?=\7*$)
        \3\8+$
    ))
)
(?# Calculate Q = \12{2} + Q_R = floor{2 * N / \9}. Since we don't have space for 2 * N, we need to calculate N / \9 first,
    including the fractional part {i.e. the remainder}, and then multiply the result, including the fractional part, by 2. )
(?=
    (x*?)(?=\9*$)                    (?# \11 = N % \9 )
    (x(x*))                          (?# \12 = N / \9; \13 = \12-1 )
    (?=\12*$)
    (?=\10+$)                        (?# iff \12 > \9, this can have a false positive, but never a false negative )
    (
        .*(?=\9$)\12                 (?# only require the alternative to be true if \12 > \9 )
    |
        (?=
            (\12*)                   (?# \15 )
            \10\13+$
        )
        .*$\15
    )
)
(?# Calculate \17 = N / \5 )
(?=
    (                                (?# \16 = N, for testing for first iteration of loop below )
        (x(x*))                      (?# \17 = N / \5; \18 = \17-1 )
        (?=\17*$)
        (?=\6+$)                     (?# iff \17 > \5, this can have a false positive, but never a false negative )
        (
            .*(?=\5$)\17             (?# only require the alternative to be true if \17 > \5 )
        |
            (?=
                (\17*)               (?# \20 )
                \6\18+$
            )
            .*$\20
        )
    )
)
(?# Seed a loop which will start with Q and divide it by {P^{K+1}-1}/{P-1} for every P^K that is a
    factor of \17. The state is encoded as \17 * P + R, where the initial value of R is Q, and P is
    the last prime factor of N to have been already processed.
    
    However, since the initial R would be larger than \17 {and for that matter there would be no room
    for any nonzero R since with the initial value of P, it is possible for \17 * P to equal N}, treat
    it as a special case, and let the initial value of R be 0, signalling the first iteration to
    pretend R=Q. This way we can avoid having to divide Q and \17 again outside the loop.
    
    While we're at it, there's really no reason to do anything extra to seed this loop. To seed it
    with an initial value of P=\3, we'd have to do some multiplication. If we don't do anything to
    seed it, it will decode P=\5. That is wrong, but harmless, since the next lower prime that \17
    is divisible by will still be the same, as \3 cannot be a factor of \17. )

(?# Start the loop. )
(
    (?=
        (                            (?# \22 = actual value of R )
            x*?(?=\17*$)             (?# move forward by directly decoded value of R, which can be zero )
            (?# The division by \17 can be done quite simply, because it is known that the quotient is prime. )
            (?=
                (x(x+))              (?# \23 = decoded value of P; \24 = \23-1 )
                (?=\18+$)            (?# iff \23 > \17, this can have a false positive, but never a false negative )
                \23*$                (?# iff \23 < \17, this can have a false positive, but never a false negative )
            )
            (
                (?=\16)              (?# true iff this is the first iteration of the loop )
                \12{2}
                (                    (?# add Q_R = floor{\11 * 2 / \9} )
                    (?=
                        .*(?=\9$)
                        \11{2}x
                    )
                |
                    x
                )
            |
            )
        )
    )
    (?=
        (x(x(x*)))                   (?# \27 = next value of P to work with; \28 = \27-1; \29 = \28-1 )
        .*(?=\17$)
        (?=
            \27*(?=\27$)             (?# assert that \27 is a factor of \17 )
            (?!
                \23                  (?# assert that \27 is less than the previous P )
            |
                (xx+)\30+$           (?# assert that \27 is prime )
            )
        )
        (?# Find the largest power of \27 that is a factor of \17 )
        (
        |
            (\27+)\32*(?=\32$)
        )
        (?!                          (?# Prime Powers test )
            ((x+)(?=\34+$)x+)
            \33*
            (?!\34+$)
            \33$
        )
        x(x*)                        (?# \35 = {the largest power of \27 that is a factor of \17} - 1 )
    )
    (?# Calculate \39 = \35 / {\27 - 1} * \27 + 1 )
    (?=
        .*(?=\35$)
        (x(x*))                      (?# \36 = {\35 - 1} / {\27 - 1}; \37 = \36-1 )
        (?=(\36*)\29\37*$)
        \36*$\38
    )
    (?=
        .*(x(                        (?# \39 = 1 + \36 * \27 = {\36 - 1} / {\27 - 1} * \27 + 1; \40 = \39-1 )
            (?=\36*$)
            \27\37+$
        ))
    )
    (?# Calculate \42 = floor{\22 / \39} )
    (
        .*(?=\40$)\22.*$                     (?# if dividing \22 / \39 would result in a number less than 1,
                                                 then N is abundant and we can exit the loop successfully )
    |
        (?=
            .*(?=\22$)
            .*?(?=\39*$)
            (x(x*))                          (?# \42 = N / \39; \43 = \42-1 )
            (?=\42*$)
            (?=\40+$)                        (?# iff \42 > \39, this can have a false positive, but never a false negative )
            (
                .*(?=\39$)\42                (?# only require the alternative to be true if \42 > \39 )
            |
                (?=
                    (\42*)                   (?# \45 )
                    \40\43+$
                )
                .*$\45
            )
        )
        (?# Encode the state for the next iteration of the loop )
        .*(?=
            \42
            (
                (?=.*(?=\17$)\27)            (?# what to do if \17 >= \27 )
                (?=(\17*)\27\18+$)
                \17*$\47
            |
                (?!.*(?=\17$)\27)            (?# what to do if \27 > \17 )
                (?=(\27*)\17\28+$)
                \27*$\48
            )
        )
    )
)+$
