(?# Match abundant numbers in the domain ^x*$ using only the ECMAScript subset of regex functionality. )
(?# N = main number )
^
(?# Capture the largest prime factor of N, and the largest power of that factor that is also a factor of N. Note that the
    algorithm used will fail if N itself is a prime power, but that's fine, because prime powers are never abundant. )
(?=
    (?:                              (?# Repeatedly divide current number by its smallest factor )
        (?=(xx+?)\1+$)
        (x+)\2*(?=\2$)
    )+                               (?# A "+" is intentionally used instead of a "*", to fail if N is prime. This saves the rest
                                         of the regex from having to do needless work, because prime numbers are never abundant. )
    (?!\1+$)                         (?# require that the last factor divided out is a different prime )
    (?=(x(x+?))\3*$)                 (?# \3 = the largest prime factor of N; \4 = \3-1 )
    (x(x+))                          (?# \5 = the largest power of \3 that is a factor of N; \6 = \5-1 )
)
(?# We want to capture \5 + \5/\3 + \5/19^2 + ... + \3^2 + \3 + 1 = {\5 * \3 - 1} / {\3 - 1}, but
    in case \5 * \3 > N we need to calculate it as {\5 - 1} / {\3 - 1} * \3 + 1. )
(?# The following division will fail if \5 == N, but that's fine, because no prime power is abundant. )
(?=
    (x(x*))                          (?# \7 = {\5 - 1} / \4; \8 = \7-1 )
    .*(?=\5$)x
    (?# it is guaranteed that either \7 > \4 or \7 == 1, which allows the following division-by-multiplication to work )
    .*(?=\7*$)
    \4\8+$
)
(?=
    .*(x(                            (?# \9 = 1 + \7 * \3  =  {\5 - 1} / {\3 - 1} * \3 + 1;  \10 = \9-1 )
        (?=\7*$)
        \3\8+$
    ))
)
(?# Calculate \17 = 2 * N / \9. Since this might be > N / 2, we need to calculate N / \9 first, including the
    fractional part {i.e. the remainder}, and then multiply the result, including the fractional part, by 2. )
(?=
    (?=\9(x*))                       (?# \11 )
    (x*)(?=x\11)                     (?# \12 = N % \9 )
    (?=\9*$)
    (x(x*))                          (?# \13 = N / \9; \14 = \13-1 )
    (?=\13*$)
    (
        (?=.*(?=\13$)\9)             (?# what to do if \13 >= \9 )
        (?=
            (\13*)                   (?# \16 )
            \10\14+$
        )
        .*$\16
    |
        (?!.*(?=\13$)\9)             (?# what to do if \9 > \13 )
        \10+$
    )
)
(?# Multiply the result, including remainder, by 2 )
(?=
    (                                (?# \17 = \13 * 2 + \12 * 2 / \9 )
        (
            (?=.*(?=\9$)\12{2}x)
        |
            x
        )
        \13{2}
    )
)
(?# Calculate \19 = N / \5 )
(?=
    (x(x*))                          (?# \19 = N / \5; \20 = \19-1 )
    (?=\19*$)
    (
        (?=.*(?=\19$)\5)             (?# what to do if \19 >= \5 )
        (?=
            (\19*)                   (?# \22 )
            \6\20+$
        )
        .*$\22
    |
        (?!.*(?=\19$)\5)             (?# what to do if \5 > \19 )
        \6+$
    )
)
(?# Seed a loop which will start with \17 and divide it by {P^{K+1}-1}/{P-1} for every P^K that is a
    factor of \19. The state is encoded as \19 * P + R, where the initial value of R is \17, and P is
    the last prime factor of N to have been already processed. However, since the initial R would be
    larger than \19 {and for that matter there would be no room for any nonzero R since with the
    initial value of P, it is possible for \19 * P to equal N}, treat it as a special case, and let
    the initial value of R be 0, signalling the first iteration to pretend R=\17. This way we can
    avoid having to divide \17 and \19 again outside the loop. )
(
    (?=.*(?=\19$)\3)                 (?# what to do if \19 >= \3 )
    .*(?=
        (?=(\19*)\3\20+$)
        \19*$\24
    )
|
    (?!.*(?=\19$)\3)                 (?# what to do if \3 > \19 )
    .*(?=
        (?=(\3*)\19\4+$)
        \3*$\25
    )
)
(?# Start the loop. )
(
    (?=\19*(x*))                     (?# \27 = decoded value of R )
    (?=
        \27
        (x(x+))                      (?# \28 = decoded value of P; \29 = \28-2 )
        (?=\28*$)
        (
            (?=.*(?=\28$)\19)        (?# what to do if \28 >= \19 )
            (?=
                (\28*)               (?# \31 )
                \20\29+$
            )
            .*$\31
        |
            (?!.*(?=\28$)\19)        (?# what to do if \19 > \28 )
            \20+$
        )
    )
    (?=
        (x(x(x*)))                   (?# \32 = next value of P to work with; \33 = \32-1; \34 = \33-1 )
        .*(?=\19$)
        (?=
            \32*(?=\32$)             (?# assert that \32 is a factor of \19 )
            (?!\28)                  (?# assert that \32 < \28 )
            (?!(xx+)\35+$)           (?# assert that \32 is prime )
        )
        (?# Find the largest power of \32 that is a factor of \19 )
        (
            (?=\32+$)
        |
            (\32+)\37*(?=\37$)
        )
        (?!                          (?# Prime Powers test )
            ((x+)(?=\39+$)x+)
            \38*
            (?!\39+$)
            \38$
        )
        x(x*)                        (?# \40 = {the largest power of \32 that is a factor of \19} - 1 )
    )
    (?=
        (                            (?# \41 = actual value of R )
            (?=.*$\27)
            \17
        |
            \27
        )
    )
    (?# Calculate \45 = \40 / {\32 - 1} * \32 + 1 )
    (?=
        .*(?=\40$)
        (x(x*))                      (?# \42 = {\40 - 1} / {\32 - 1}; \43 = \42-1 )
        (?=(\42*)\34\43*$)
        \42*$\44
    )
    (?=
        .*(x(                        (?# \45 = 1 + \42 * \32 = {\42 - 1} / {\32 - 1} * \32 + 1; \46 = \45-1 )
            (?=\42*$)
            \32\43+$
        ))
    )
    (?# Calculate \49 = \41 / \45 )
    (
        .*(?=\45$)x\41.*$                    (?# if dividing \41 / \45 would result in a number less than 1,
                                                 then N is abundant and we can exit the loop successfully )
    |
        (?=
            .*(?=\41$)
            (?=\45(x*))                      (?# \48 )
            .*(?=x\48)
            (?=\45*$)
            (x(x*))                          (?# \49 = N / \45; \50 = \49-1 )
            (?=\49*$)
            (
                (?=.*(?=\49$)\45)            (?# what to do if \49 >= \45 )
                (?=
                    (\49*)                   (?# \52 )
                    \46\50+$
                )
                .*$\52
            |
                (?!.*(?=\49$)\45)            (?# what to do if \45 > \49 )
                \46+$
            )
        )
        (?# Encode the state for the next iteration of the loop )
        .*(?=
            \49
            (
                (?=.*(?=\19$)\32)            (?# what to do if \19 >= \32 )
                (?=(\19*)\32\20+$)
                \19*$\54
            |
                (?!.*(?=\19$)\32)            (?# what to do if \32 > \19 )
                (?=(\32*)\19\33+$)
                \32*$\55
            )
        )
    )
)+$
