(?# Match abundant numbers in the domain ^x*$ using only the ECMAScript subset of regex functionality. )
(?# N = main number )
^
(?# Capture the largest prime factor of N, and the largest power of that factor that is also a factor of N. Note that the
    algorithm used will fail if N itself is a prime power, but that's fine, because prime powers are never abundant. )
(?=
    (?:                              (?# Repeatedly divide current number by its smallest factor )
        (?=(xx+?)\1+$)
        (x+)\2*(?=\2$)
    )+                               (?# A "+" is intentionally used instead of a "*", to fail if N is prime. This saves the rest
                                         of the regex from having to do needless work, because prime numbers are never abundant. )
    (?!\1+$)                         (?# require that the last factor divided out is a different prime )
    (?=(x(x+?))\3*$)                 (?# \3 = the largest prime factor of N; \4 = \3-1 )
    (x(x+))                          (?# \5 = the largest power of \3 that is a factor of N; \6 = \5-1 )
)
(?# We want to capture \5 + \5/\3 + \5/\3^2 + ... + \3^2 + \3 + 1 = {\5 * \3 - 1} / {\3 - 1}, but
    in case \5 * \3 > N we need to calculate it as {\5 - 1} / {\3 - 1} * \3 + 1. )
(?# The following division will fail if \5 == N, but that's fine, because no prime power is abundant. )
(?=
    (x(x*))                          (?# \7 = {\5 - 1} / \4; \8 = \7-1 )
    .*(?=\6$)
    (?# it is guaranteed that either \7 > \4 or \7 == 1, which allows the following division-by-multiplication to work )
    (?=\7*$)
    \4\8+$
)
(?=
    .*(x(                            (?# \9 = 1 + \7 * \3  =  {\5 - 1} / {\3 - 1} * \3 + 1;  \10 = \9-1 )
        (?=\7*$)
        \3\8+$
    ))
)
(?# Calculate Q = \12{2} + Q_R = floor{2 * N / \9}. Since we don't have space for 2 * N, we need to calculate N / \9 first,
    including the fractional part {i.e. the remainder}, and then multiply the result, including the fractional part, by 2. )
(?=
    (x*?)(?=\9*$)                    (?# \11 = N % \9 )
    (x(x*))                          (?# \12 = N / \9; \13 = \12-1 )
    (?=\12*$)
    (?=\10+$)                        (?# must match if \12 < \9; otherwise doesn't matter )
    (\12*)\13+(?=\10$)               (?# \15 = must be zero for multiplication to be true if \12 >= \9; otherwise doesn't matter )
    (
        \12                          (?# only require the alternative to be true if \12 >= \9 )
    |
        \10\15                       (?# identical to .*$\15 )
    )
)
(?# Calculate \16 = N / \5 )
(?=
    (x(x*))                          (?# \16 = N / \5; \17 = \16-1 )
    (?=\16*$)
    (?=\6+$)                         (?# must match if \16 < \5; otherwise doesn't matter )
    (\16*)\17+(?=\6$)                (?# \18 = must be zero for multiplication to be true if \16 >= \5; otherwise doesn't matter )
    (
        \16                          (?# only require the alternative to be true if \16 >= \5 )
    |
        \6\18                        (?# identical to .*$\18 )
    )
)
(?# Seed a loop which will start with Q and divide it by {P^{K+1}-1}/{P-1} for every P^K that is a
    factor of \16. The state is encoded as \16 * P + R, where the initial value of R is Q, and P is
    the last prime factor of N to have been already processed.
    
    However, since the initial R would be larger than \16 {and for that matter there would be no room
    for any nonzero R since with the initial value of P, it is possible for \16 * P to equal N}, treat
    it as a special case, and let the initial value of R be 0, signalling the first iteration to
    pretend R=Q. This way we can avoid having to divide Q and \16 again outside the loop.
    
    While we're at it, there's really no reason to do anything extra to seed this loop. To seed it
    with an initial value of P=\3, we'd have to do some multiplication. If we don't do anything to
    seed it, it will decode P=\5. That is wrong, but harmless, since the next lower prime that \16
    is divisible by will still be the same, as \3 cannot be a factor of \16. )

(?# Start the loop. )
(
    (?=
        (                            (?# \21 = actual value of R )
            x*?(?=\16*$)             (?# move forward by directly decoded value of R, which can be zero )
            (?# The division by \16 can be done quite simply, because it is known that the quotient is prime. )
            (?=
                (x(x+))              (?# \22 = decoded value of P; \23 = \22-1 )
                (?=\17+$)            (?# iff \22 > \16, this can have a false positive, but never a false negative )
                \22*$                (?# iff \22 < \16, this can have a false positive, but never a false negative )
            )
            (
                (?=\5+$)             (?# true iff this is the first iteration of the loop )
                \12{2}
                (                    (?# add Q_R = floor{\11 * 2 / \9} )
                    (?=
                        .*(?=\9$)
                        \11{2}x
                    )
                |
                    x
                )
            |
            )
        )
    )
    (?=
        (x(x(x*)))                   (?# \26 = next value of P to work with; \27 = \26-1; \28 = \27-1 )
        .*(?=\16$)
        (?=
            \26*(?=\26$)             (?# assert that \26 is a factor of \16 )
            (?!
                \22                  (?# assert that \26 is less than the previous P )
            |
                (xx+)\29+$           (?# assert that \26 is prime )
            )
        )
        (?# Find the largest power of \26 that is a factor of \16 )
        (
        |
            (\26+)\31*(?=\31$)
        )
        (?!                          (?# Prime Powers test )
            ((x+)(?=\33+$)x+)
            \32*
            (?!\33+$)
            \32$
        )
        x(x*)                        (?# \34 = {the largest power of \26 that is a factor of \16} - 1 )
    )
    (?# Calculate \38 = \34 / {\26 - 1} * \26 + 1 )
    (?=
        .*(?=\34$)
        (x(x*))                      (?# \35 = {\34 - 1} / {\26 - 1}; \36 = \35-1 )
        (?=(\35*)\28\36*$)           (?# \37 = must be zero for multiplication to be true )
        \35*$\37
    )
    (?=
        .*(x(                        (?# \38 = 1 + \35 * \26 = {\35 - 1} / {\26 - 1} * \26 + 1; \39 = \38-1 )
            (?=\35*$)
            \26\36+$
        ))
    )
    (?# Calculate \41 = floor{\21 / \38} )
    (
        .*(?=\39$)\21.*$             (?# if dividing \21 / \38 would result in a number less than 1,
                                         then N is abundant and we can exit the loop successfully )
    |
        (?=
            .*?(?!x\21)(?=\38*$)
            (x(x*))                  (?# \41 = N / \38; \42 = \41-1 )
            (?=\41*$)
            (?=\39+$)                (?# must match if \41 < \38; otherwise doesn't matter )
            (\41*)\42+(?=\39$)       (?# \43 = must be zero for multiplication to be true if \41 >= \38; otherwise doesn't matter )
            (
                \41                  (?# only require the alternative to be true if \41 >= \38 )
            |
                \39\43               (?# identical to .*$\43 )
            )
        )
        (?# Encode the state for the next iteration of the loop, as \16 * \26 + \41 )
        .*(?=
            \41
            (?=(\16*)\26\17+$)       (?# \45 = must be zero for multiplication to be true )
            \16*$\45
        )
    )
)+$
