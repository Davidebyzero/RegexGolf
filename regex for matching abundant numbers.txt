(?# Match abundant numbers in the domain ^x*$ using only the ECMAScript subset of regex functionality. )
(?# N = main number )
^
(?# Capture the largest prime factor of N, and the largest power of that factor that is also a factor of N. Note that the
    algorithm used will fail if N itself is a prime power, but that's fine, because prime powers are never abundant. )
(?=
    (?:                              (?# Repeatedly divide current number by its smallest factor )
        (?=(xx+?)\1+$)
        (x+)\2*(?=\2$)
    )+                               (?# A "+" is intentionally used instead of a "*", to fail if N is prime. This saves the rest
                                         of the regex from having to do needless work, because prime numbers are never abundant. )
    (?!\1+$)                         (?# require that the last factor divided out is a different prime )
    (?=(x(x+?))\3*$)                 (?# \3 = the largest prime factor of N; \4 = \3-1 )
    (x(x+))                          (?# \5 = the largest power of \3 that is a factor of N; \6 = \5-1 )
)
(?# We want to capture \5 + \5/\3 + \5/19^2 + ... + \3^2 + \3 + 1 = {\5 * \3 - 1} / {\3 - 1}, but
    in case \5 * \3 > N we need to calculate it as {\5 - 1} / {\3 - 1} * \3 + 1. )
(?# The following division will fail if \5 == N, but that's fine, because no prime power is abundant. )
(?=
    (x(x*))                          (?# \7 = {\5 - 1} / \4; \8 = \7-1 )
    .*(?=\6$)
    (?# it is guaranteed that either \7 > \4 or \7 == 1, which allows the following division-by-multiplication to work )
    .*(?=\7*$)
    \4\8+$
)
(?=
    .*(x(                            (?# \9 = 1 + \7 * \3  =  {\5 - 1} / {\3 - 1} * \3 + 1;  \10 = \9-1 )
        (?=\7*$)
        \3\8+$
    ))
)
(?# Calculate \17 = 2 * N / \9. Since this might be > N / 2, we need to calculate N / \9 first, including the
    fractional part {i.e. the remainder}, and then multiply the result, including the fractional part, by 2. )
(?=
    (?=\9(x*))                       (?# \11 )
    (x*)(?=x\11)                     (?# \12 = N % \9 )
    (?=\9*$)
    (x(x*))                          (?# \13 = N / \9; \14 = \13-1 )
    (?=\13*$)
    (
        (?=.*(?=\13$)\9)             (?# what to do if \13 >= \9 )
        (?=
            (\13*)                   (?# \16 )
            \10\14+$
        )
        .*$\16
    |
        (?!.*(?=\13$)\9)             (?# what to do if \9 > \13 )
        \10+$
    )
)
(?# Multiply the result, including remainder, by 2 )
(?=
    (                                (?# \17 = \13 * 2 + \12 * 2 / \9 )
        (
            (?=.*(?=\9$)\12{2}x)
        |
            x
        )
        \13{2}
    )
)
(?# Calculate \19 = N / \5 )
(?=
    (x(x*))                          (?# \19 = N / \5; \20 = \19-1 )
    (?=\19*$)
    (
        (?=.*(?=\19$)\5)             (?# what to do if \19 >= \5 )
        (?=
            (\19*)                   (?# \22 )
            \6\20+$
        )
        .*$\22
    |
        (?!.*(?=\19$)\5)             (?# what to do if \5 > \19 )
        \6+$
    )
)
(?# Seed a loop which will start with \17 and divide it by {P^{K+1}-1}/{P-1} for every P^K that is a
    factor of \19. The state is encoded as \19 * P + R, where the initial value of R is \17, and P is
    the last prime factor of N to have been already processed.
    
    However, since the initial R would be larger than \19 {and for that matter there would be no room
    for any nonzero R since with the initial value of P, it is possible for \19 * P to equal N}, treat
    it as a special case, and let the initial value of R be 0, signalling the first iteration to
    pretend R=\17. This way we can avoid having to divide \17 and \19 again outside the loop.
    
    While we're at it, there's really no reason to do anything extra to seed this loop. We would have
    to seed it with an initial value of P=\3; if we don't do anything to seed it, it will decode P=\5,
    which is wrong because this will make it use P=\3 as the next prime when it needs to work on the
    next lower prime. So, we'll treat the first iteration as a special case for decoding P as well,
    making it behave as if P=\3 if the initially decoded R is 0, i.e. on the first iteration only. )

(?# Start the loop. )
(
    (?=\19*(x*))                     (?# \24 = decoded value of R )
    (?=
        \24
        (x(x+))                      (?# \25 = decoded value of P; \26 = \25-2 )
        (?=\25*$)
        (
            (?=.*(?=\25$)\19)        (?# what to do if \25 >= \19 )
            (?=
                (\25*)               (?# \28 )
                \20\26+$
            )
            .*$\28
        |
            (?!.*(?=\25$)\19)        (?# what to do if \19 > \25 )
            \20+$
        )
    )
    (?=
        (x(x(x*)))                   (?# \29 = next value of P to work with; \30 = \29-1; \31 = \30-1 )
        .*(?=\19$)
        (?=
            \29*(?=\29$)             (?# assert that \29 is a factor of \19 )
            (?!\3|\25)               (?# assert that \29 is less than the previous P )
            (?!(xx+)\32+$)           (?# assert that \29 is prime )
        )
        (?# Find the largest power of \29 that is a factor of \19 )
        (
            (?=\29+$)
        |
            (\29+)\34*(?=\34$)
        )
        (?!                          (?# Prime Powers test )
            ((x+)(?=\36+$)x+)
            \35*
            (?!\36+$)
            \35$
        )
        x(x*)                        (?# \37 = {the largest power of \29 that is a factor of \19} - 1 )
    )
    (?=
        (                            (?# \38 = actual value of R )
            (?=.*$\24)
            \17
        |
            \24
        )
    )
    (?# Calculate \42 = \37 / {\29 - 1} * \29 + 1 )
    (?=
        .*(?=\37$)
        (x(x*))                      (?# \39 = {\37 - 1} / {\29 - 1}; \40 = \39-1 )
        (?=(\39*)\31\40*$)
        \39*$\41
    )
    (?=
        .*(x(                        (?# \42 = 1 + \39 * \29 = {\39 - 1} / {\29 - 1} * \29 + 1; \43 = \42-1 )
            (?=\39*$)
            \29\40+$
        ))
    )
    (?# Calculate \46 = \38 / \42 )
    (
        .*(?=\43$)\38.*$                     (?# if dividing \38 / \42 would result in a number less than 1,
                                                 then N is abundant and we can exit the loop successfully )
    |
        (?=
            .*(?=\38$)
            (?=\42(x*))                      (?# \45 )
            .*(?=x\45)
            (?=\42*$)
            (x(x*))                          (?# \46 = N / \42; \47 = \46-1 )
            (?=\46*$)
            (
                (?=.*(?=\46$)\42)            (?# what to do if \46 >= \42 )
                (?=
                    (\46*)                   (?# \49 )
                    \43\47+$
                )
                .*$\49
            |
                (?!.*(?=\46$)\42)            (?# what to do if \42 > \46 )
                \43+$
            )
        )
        (?# Encode the state for the next iteration of the loop )
        .*(?=
            \46
            (
                (?=.*(?=\19$)\29)            (?# what to do if \19 >= \29 )
                (?=(\19*)\29\20+$)
                \19*$\51
            |
                (?!.*(?=\19$)\29)            (?# what to do if \29 > \19 )
                (?=(\29*)\19\30+$)
                \29*$\52
            )
        )
    )
)+$
