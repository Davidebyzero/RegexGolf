(?# Match abundant numbers in the domain ^x*$ using only the ECMAScript subset of regex functionality. )
(?# N = main number )
^
(?# Capture the largest prime factor of N, and the largest power of that factor that is also a factor of N. Note that the
    algorithm used will fail if N itself is a prime power, but that's fine, because prime powers are never abundant. )
(?=
    (?:                              (?# Repeatedly divide current number by its smallest factor )
        (?=(xx+?)\1+$)
        (x+)\2*(?=\2$)
    )+                               (?# A "+" is intentionally used instead of a "*", to fail if N is prime. This saves the rest
                                         of the regex from having to do needless work, because prime numbers are never abundant. )
    (?!\1+$)                         (?# require that the last factor divided out is a different prime )
    (?=(x(x+?))\3*$)                 (?# \3 = the largest prime factor of N; \4 = \3-1 )
    (x(x+))                          (?# \5 = the largest power of \3 that is a factor of N; \6 = \5-1 )
)
(?# We want to capture \5 + \5/\3 + \5/\3^2 + ... + \3^2 + \3 + 1 = {\5 * \3 - 1} / {\3 - 1}, but
    in case \5 * \3 > N we need to calculate it as {\5 - 1} / {\3 - 1} * \3 + 1. )
(?# The following division will fail if \5 == N, but that's fine, because no prime power is abundant. )
(?=
    (x(x*))                          (?# \7 = {\5 - 1} / \4; \8 = \7-1 )
    .*(?=\6$)
    (?# it is guaranteed that either \7 > \4 or \7 == 1, which allows the following division-by-multiplication to work )
    (?=\7*$)
    \4\8+$
)
(?=
    (.*)                             (?# \9 = tool to compare against \10 )
	(                                (?# \10 = \7 * \3  =  {\5 - 1} / {\3 - 1} * \3; later, \12 = \10 + 1 )
        (?=\7*$)
        \3\8+$
    )
)
(?# Calculate Q = \14{2} + Q_R = floor{2 * N / \12}. Since we don't have space for 2 * N, we need to calculate N / \12 first,
    including the fractional part {i.e. the remainder}, and then multiply the result, including the fractional part, by 2. )
(?=
    (x*?)(?=(x\10)+$)                (?# \11 = N % \12; \12 = \10 + 1 )
    (?=\11\9|(x))                    (?# \13 = Q_R = floor{\11 * 2 / \12} == +1 carry if \11 * 2 > \10, or NPCG otherwise )
    (x(x*))                          (?# \14 = N / \12; \15 = \14-1 )
    (?=\14*$)
    (?=\10+$)                        (?# must match if \14 <  \12; otherwise doesn't matter )
    \10\15+$                         (?# must match if \14 >= \12; otherwise doesn't matter )
)
(?# Calculate \16 = N / \5. The division by \5 can be done quite simply, because the divisor is a prime power. )
(?=
    (x(x*))                          (?# \16 = N / \5; \17 = \16-1 )
    (?=\16*$)
    \6\17+$
)
(?# Seed a loop which will start with Q and divide it by {P^{K+1}-1}/{P-1} for every P^K that is a
    factor of \16. The state is encoded as \16 * P + R, where the initial value of R is Q, and P is
    the last prime factor of N to have been already processed.
    
    However, since the initial R would be larger than \16 {and for that matter there would be no room
    for any nonzero R since with the initial value of P, it is possible for \16 * P to equal N}, treat
    it as a special case, and let the initial value of R be 0, signalling the first iteration to
    pretend R=Q. This way we can avoid having to divide Q and \16 again outside the loop.
    
    While we're at it, there's really no reason to do anything extra to seed this loop. To seed it
    with an initial value of P=\3, we'd have to do some multiplication. If we don't do anything to
    seed it, it will decode P=\5. That is wrong, but harmless, since the next lower prime that \16
    is divisible by will still be the same, as \3 cannot be a factor of \16. )

(?# Start the loop. )
(
    (?=
        (                            (?# \19 = actual value of R )
            x*?(?=\16*$)             (?# move forward by directly decoded value of R, which can be zero )
            (?# The division by \16 can be done quite simply, because it is known that the quotient is prime. )
            (?=
                (x+)                 (?# \20 = decoded value of P )
                (?=\17+$)            (?# iff \20 > \16, this can have a false positive, but never a false negative )
                \20*$                (?# iff \20 < \16, this can have a false positive, but never a false negative )
            )
            (
                (?=\5+$)             (?# true iff this is the first iteration of the loop )
                \14{2}\13?           (?# "\13?" so that iff it's a NPCG it acts as empty with both ECMAScript and PCRE behavior )
            |
            )
        )
    )
    (?=
        (xx(x*))                     (?# \22 = next value of P to work with; \23 = {\22-1}-1 )
        .*(?=\16$)
        (?=
            \22*                     (?# along with the "\22$" below, assert that \22 is a factor of \16 )
            (?!\20)                  (?# assert that \22 is less than the previous P )
            \22$                     (?# along with the "\22*" above, assert that \22 is a factor of \16 )
        )
        (?# Find the largest power of \22 that is a factor of \16, while also asserting that \20 is prime )
        (
        |
            (x+)\25*(?=\25$)
        )
        (?!
            (xx+)\26*
            (?!\22+$)
            \26$
        )
        (\22+$)                      (?# \27 = the largest power of \22 that is a factor of \16 )
    )
    (?# Calculate \30 = {\27 - 1} / {\22 - 1} * \22 + 1 )
    (?=
        .*(?=\27)x                   (?# tail = \27 - 1 )
        (x(x*))                      (?# \28 = {\27 - 1} / {\22 - 1}; \29 = \28-1 )
        (?=\28*$)
        \23\29*$
    )
    (?=
        .*(x(                        (?# \30 = 1 + \28 * \22 = {\28 - 1} / {\22 - 1} * \22 + 1; \31 = \30-1 )
            (?=\28*$)
            \22\29+$
        ))
    )
    (?# Calculate \33 = floor{\19 / \30} )
    (
        .*(?!\30)\19                 (?# if dividing \19 / \30 would result in a number less than 1,
                                         then N is abundant and we can exit the loop successfully )
    |
        (?=
            .*?(?!x\19)(?=\30*$)
            (x(x*))                  (?# \33 = \19 / \30; \34 = \33-1 )
            (?=\33*$)
            (?=\31+$)                (?# must match if \33 <  \30; otherwise doesn't matter )
            \31\34+$                 (?# must match if \33 >= \30; otherwise doesn't matter )
        )
        (?# Encode the state for the next iteration of the loop, as \16 * \22 + \33 )
        (?=
            \33
            (x*)(?=\16*$)            (?# \35 )
            \22\17+$
        )
        \35
    )
)+$