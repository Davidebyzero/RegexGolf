# Giving an input number N in the domain ^x*$, this regex returns floor(N / sqrt(2))
(?=
    (x(x*))                    # \1 = will be the square root of the main number, rounded down; \2 = \1 - 1
    (x)*(?=\1*$)               # \3 = tool to round up instead of down
    \2+$
)

# Step 1: Calculate N*N in base ceil(sqrt(N))

(?=(x(\2\3))+(x?(x*)))         # \4 = \1 + \3 = ceil(sqrt(N)), the number base to work in; \5 = \4-1; \6 = N % \4; \7 = \6-1, or 0 if \6==0
(?=
	\6
	(x(x*))                    # \8 = floor(N / \4); \9 = \8-1
	(?=\8*$)                   # we can skip the test for divisibility by \5 because it's guaranteed that \5 <= \8
	\5\9*$
)
(?=
	.*
	(?=
		(?=\6*$)               # tail = \6 * \6
		\6\7+$
	)
	(x*?)(?=\4*$)              # \10 =       (\6 * \6) % \4, the base-\4 digit in place 0 of the result for N*N
	(x?(x*))                   # \11 = floor((\6 * \6) / \4); \12 = \11-1, or 0 if \11==0
	(?=\11*$)
	(
		(?=\5+$)
		\5\12*$
	|
		$\11                   # must make a special case for \11==0, because \5 is nonzero
	)
)
(?=
	.*
	(?=
		(?=\6*$)               # tail = \6 * \8; must do symmetric multiplication, because \6 is occasionally 1 larger than \8
		(?=\8*$)
		(?=\6\9+$)
		   \8\7+$
	|
		$\6                    # must make a special case for \6==0, because \8 might not be 0
	)
	(x*?)(?=\4*$)              # \14 =       (\6 * \8) % \4
	(x?(x*))                   # \15 = floor((\6 * \8) / \4); \16 = \15-1, or 0 if \15==0
	(?=\15*$)
	(
		(?=\5+$)
		\5\16*$
	|
		$\15                   # must make a special case for \15==0, because \5 is nonzero
	)
)
(?=
	.*(?=\14\14\11$)           # tail =       2 * \14 + \11
	(x*?)(?=\4*$)              # \18 =       (2 * \14 + \11) % \4, the base-\4 digit in place 1 of the result for N*N
	(x?(x*))                   # \19 = floor((2 * \14 + \11) / \4); \20 = \19-1, or 0 if \19==0
	(?=\19*$)
	(
		(?=\5+$)
		\5\20*$
	|
		$\19                   # must make a special case for \19==0, because \5 is nonzero
	)
)                              # {\8*\8 + 2*\15 + \19} = the base-\4 digit in place 2 of the result for N*N, which is allowed to exceed \4 and will always do so;
                               # Note that it will be equal to N iff N is a perfect square, because of the choice of number base.

# Step 2: Find the largest M such that 2*M*M is not greater than N*N

# Step 2a: Calculate M*M in base \4
(?=
	.*?                            # Determine value of M with backtracking, starting with largest values first
	(?=
		(                          # \22 =       M
			(?=\4*(x?(x*)))\23     # \23 =       M % \4; \24 = \23-1, or 0 if \23==0
			(x(x*))                # \25 = floor(M / \4); \26 = \25-1
			(?=\25*$)              # we can skip the test for divisibility by \5, but I'm not sure why; TODO: figure out why this is
			\5\26*$
		)
	)
	(?<=
		(?=
			(?=
				.*
				(?=\25*$)
				(\25\26+$)                 # \27 = \25 * \25
			)
			(?=
				.*
				(?=
					(?=\23*$)              # tail = \23 * \23
					\23\24+$
				)
				(x*?)(?=\4*$)              # \28 =       (\23 * \23) % \4, the base-\4 digit in place 0 of the result for M*M
				(x?(x*))                   # \29 = floor((\23 * \23) / \4); \30 = \29-1, or 0 if \29==0
				(?=\29*$)
				(
					(?=\5+$)
					\5\30*$
				|
					$\29                   # must make a special case for \29==0, because \5 is nonzero
				)
			)
			(?=
				.*
				(?=
					(?=\23*$)              # tail = \23 * \25; must do symmetric multiplication, because \23 is occasionally 1 larger than \25
					(?=\25*$)
					(?=\23\26+$)
					   \25\24+$
				|
					$\23                   # must make a special case for \23==0, because \25 might not be 0
				)
				(x*?)(?=\4*$)              # \32 =       (\23 * \25) % \4
				(x?(x*))                   # \33 = floor((\23 * \25) / \4); \34 = \33-1, or 0 if \33==0
				(?=\33*$)
				(
					(?=\5+$)
					\5\34*$
				|
					$\33                   # must make a special case for \33==0, because \5 is nonzero
				)
			)
			(?=
				.*(?=\32\32\29$)           # tail =       2 * \32 + \29
				(x*?)(?=\4*$)              # \36 =       (2 * \32 + \29) % \4, the base-\4 digit in place 1 of the result for M*M
				(x?(x*))                   # \37 = floor((2 * \32 + \29) / \4); \38 = \37-1, or 0 if \37==0
				(?=\37*$)
				(
					(?=\5+$)
					\5\38*$
				|
					$\37                   # must make a special case for \37==0, because \5 is nonzero
				)
			)                              # {\27 + 2*\33 + \37} = the base-\4 digit in place 2 of the result for M*M, which is allowed to exceed \4 and will always do so

			# Step 2b: Calculate 2*M*M in base \4
			(?=
				.*
				(?=\28\28)                 # tail =       2*\28
				(?=\4*(x*))                # \40 =       (2*\28) % \4, the base-\4 digit in place 0 of the result for 2*M*M
				(\5(x)|)                   # \42 = floor((2*\28) / \4) == +1 carry if {2*\28} does not fit in a base \4 digit
			)
			(?=
				.*
				(?=\36\36\42)              # tail =       2*\36 + \42
				(?=\4*(x*))                # \43 =       (2*\36 + \42) % \4, the base-\4 digit in place 1 of the result for 2*M*M
				(\5(x)|)                   # \45 = floor((2*\36 + \42) / \4) == +1 carry if {2*\36 + \42} does not fit in a base \4 digit
			)                              # 2*(\27 + 2*\33 + \37) + \45 = the base-\4 digit in place 2 of the result for 2*M*M, which is allowed to exceed \4 and will always do so

			# Step 2c: Require that 2*M*M <= N*N

			(?=
				(?=
					(.*)                   # \46
					\15\15\19
					(?=\8*$)               # tail = \8 * \8
					\8\9+$
				)
				\46                        # tail = {\8*\8 + 2*\15 + \19}; we can do this unconditionally because our digits in place 2 are always greater than those in places 0..1
				(
					x+
				|
					(?=
						.*(?!\18)\43       # \43 < \18
					|
						(?!.*(?!\40)\10)   # \40 <= \10
						.*(?=\18$)\43$     # \43 == \18
					)
				)
				(\27\33\33\37){2}\45$      # 2*(\27 + 2*\33 + \37) + \45
			)
		)
		^.*
	)
)
\22
|x\B|                          # handle inputs in the domain ^x{0,2}$
