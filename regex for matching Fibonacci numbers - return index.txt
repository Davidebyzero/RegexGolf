(?# Match Fibonacci numbers in the domain ^x*$ using only the ECMAScript subset of regex functionality )
(?# Returns the Fibonacci index minus 1 as a match )
(?# Optimized for RegexMathEngine )
^
(?:
    (?=
        (?=
            (x(x+?))                             (?# \1 = will be the square root of 1/8 of the main number, rounded down; \2 = \1 - 1 )
            (?=
                (.*)(?=\1*$)                     (?# \3 )
                (\2+$)                           (?# \1\4 = result of multiplying \1*\1 )
            )
            (?!x{8}\1{23}\4{8})                  (?# make sure the next square wouldn't fit, allowing the lazy-quantifier speed optimization to work )
        )
        (?=
            \3                                   (?# seed first chunk for Fibonacci series: 1 + 1*1 - 2 = 0, the pair {1,2} with encoding formula 1 + a*a - b )
            (?:
                (?=
                    (?=(\1*)(x*))                (?# \5 = leftover leading up to current chunk; \6 = current chunk )
                    (x(x*?))                     (?# \7 = will be one greater than the rounded-down square root of the current chunk; \8 = \7 - 1 )
                    (?=
                        .*(?=\7*$)
                        (\7\8+$)                 (?# \9 = result of multiplying \7*\7 )
                    )
                    (?!\5\9)                     (?# require that \7*\7 be just large enough to not fit inside the current chunk - enabled by lazy quantifier )
                    (?=.*(?=x\9$)\6(x(x*)))      (?# \10 = the larger Fibonacci number; \11 = \10 - 1; in sequence, we now have \7, \10, \7\10 )
                )
                (?=
                    .*(?=\10*$)
                    (\10\11+$)                   (?# \12 = result of multiplying \10*\10 )
                )
                (
                    (?=.*(?=\1$)\12(.*))         (?# \14 )
                    \14\6\8\10                   (?# consume the current Fibonacci pair chunk, \6, and encode and write the next chunk )
                |
                    (.*)                         (?# exit the loop when \10*\10 > \1; \7 and \10 will be our return values; \15 = tool to calculate Fibonacci index )
                )
            )*
        )
        (?=
            .*(?=\10*$)
            (\7\11+$)                            (?# \16 = \7 * \10 )
        )
        (?=(\9\12)(.*))                          (?# \17 = \7*\7 + \10*\10;  \18 = leftover for modulo usage )
        (?=(\16\16\12))                          (?# \19 = 2*\7*\10 + \10*\10 )
        (?=.*(?=\19)\17(x*))                     (?# \20 = \19 - \17; a consecutive sequence is formed by \20, \17, \19 )

        (?=x\18(x*))                             (?# \21 = \17 - 1, for modulo usage )
        (?=   \20*(x*))                          (?# \22 - this modulo allows us to link two events to the same condition; can be 0, 1, or 2 )
        (?=\21\17*(x*))                          (?# \23 - this modulo allows us to link two events to the same condition; can be 0, 1, or 2 )
        (?=(\22{3}\23))                          (?# \24 - this can be 2, 3, 4, or 6, corresponding to consecutive Fibonacci numbers that our main number might be )

        (?=( (?=.*(?=\24$)x{4})\17 | \20 )(.*))  (?# \25 = the first  Fibonacci that we'll use for our final formula; \26 = tool for subtracting 1 from it )
        (?=( (?=.*(?=\24$)x{4})\19 | \17 )(.*))  (?# \27 = the second Fibonacci that we'll use for our final formula; \28 = tool for subtracting 1 from it )
        (?=x\26(x*))                             (?# \29 = \25 - 1 )
        (?=x\28(x*))                             (?# \30 = \27 - 1 )

        (
            (?=
                .*(?=\25*$)
                (\25\29+$)                       (?# \32 = result of multiplying \25*\25 )
            )\32
        
            (?=\27+$)                            (?# commence multiplication of \27*\27 )
            \27
            (
                \30
                (?!\27+$)
            )+
        |
            (?=.*(?=\27{2}$)\25(x(x*)))          (?# \34 = 2*\27 - \25;  \35 = \34 - 1 )
        
            (?=\34+$)                            (?# commence multiplication of \34 * \25 )
            \25
            (
                \35
                (?!\34+$)
            )+
        )$
    )
    (?=
        .*(?=\24$)xx
        (x(?=xx))?
        (x*)                                     (?# \38 )
    )
    (
        (?=
            \3\15
            .*?(?=\1*$)
            (x(x*))                              (?# \40; \41 = \40-1 )
            (?=\40*$)
            (?=\2+$)
            \2\41+$
        )
        (xx\40){4}
    |
        \7{4}
    )
    \38
    xxx
|
    (?# Return the Fibonacci index minus 1 as a match )
    (?=(xx?x?|(x{5})?(x{8})?)$)                  (?# the Fibonacci numbers 0, 1, 2, 3, 5, 8, 13 cannot be handled by our main algorithm, so match them here )
    (
        x{4}
        (xx?(?=xxx))?                            (?# return index for 5, 8, 13 )
    |
        x*                                       (?# return index for 0, 1, 2, 3 )
    )
)
