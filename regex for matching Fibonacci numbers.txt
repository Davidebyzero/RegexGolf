(?# Match Fibonacci numbers in the domain ^x*$ using only the ECMAScript subset of regex functionality )

^(?:
    (?=
        (x(x*))                        (?# \1 = potential number for which \1 * \1 * 5 plus or minus 4 is a perfect square;
                                           this is true iff \1 is a Fibonacci number. Outside the surrounding lookahead block,
                                           \1 is guaranteed to be the largest number for which this is true such that
                                           \1 * \1 * 5 + 4 fits into the main number. \2 = \1 - 1 )
        (?=
            .*(?=\1*$)
            (\1\2+?(?=\1*$))           (?# \3 = result of multiplying \1 * \1 )
        )
        .*(?=\3{5} x{4}$)              (?# leave a leftover number equalling \3 * 5 plus or minus 4, on which the next test will be done )
        (|x{4})\4                      (?# \4 = parity - is determined by whether the index of Fibonacci number \1 is odd or even )
        (?# require that the current leftover number is a perfect square)
        (x(x*))(?=\5*$)                (?# \5 = potential square root, which will be the square root outside the surrounding lookahead; \6 = \5-1 )
        (?:
            \6
            (?!\5+$)
        )+$
    )
    (?=.*(?=\3{5}xx$)\4(x*)\7(x?))     (?# \7 = arithmetic mean of \1*\1*5 and \5*\5, divided by 2; \8 = remainder of division )
    (?=
        .*(?=\5+$)
        (\1\6+?(?=\5*$))               (?# \9 = result of multiplying \5 * \1, where \5 is larger )
    )
    (?=.*(?=\9)(x*)\10)                (?# \10 = \9 / 2; the remainder of division will always be == \8, because \5 is odd iff \1 is odd )
    \7\8\9
    (
        \7\9
    |
        \10
    )
|
    xx?x?|(x{8}|)(x{5}\12?)?           (?# the Fibonacci numbers 0, 1, 2, 3, 5, 8, 13, 21 cannot be handled by our main algorithm, so match them here )
)$
