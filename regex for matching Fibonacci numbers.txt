(?# Match Fibonacci numbers in the domain ^x*$ using only the ECMAScript subset of regex functionality )

^(?:
    (?=
        (x(x*))                          (?# \1 = potential number for which \1 * \1 * 5 plus or minus 4 is a perfect square;
                                             this is true iff \1 is a Fibonacci number. Outside the surrounding lookahead block,
                                             \1 is guaranteed to be the largest number for which this is true such that
                                             \1 * \1 * 5 + 4 fits into the main number. \2 = \1 - 1 )
        (?=
            (?=\1*(x*))
            (\2+?(?=\1*\3$))
        )
        .*(?=(\1\4){5} x{4}$) (?:|x{8})  (?# \5 = \1 * \1; leave a leftover number equalling \5 * 5 plus or minus 4, on which the next test will be done )
        (?# require that the current leftover number is a perfect square)
        (x(x*))(?=\6*$)                  (?# \6 = potential square root, which will be the square root outside the surrounding lookahead; \7 = \6-1 )
        (?:
            \7
            (?!\6+$)
        )+$
    )
    (?=.*(?=\6)\1(x(x*))\8)      (?# \8 = the next lower Fibonacci number than \1;  \9 = \8 - 1 )
    (?=
        (?=\8*(x*))
        (\8\9+?(?=\8*\10$))      (?# \11 = result of multiplying \8 * \8 )
    )
    (\11\5\5)\5                  (?# \12 )
    (\12?)                       (?# \13 - controls which multiplication we're trying )
    (?=
        (x(                      (?# \14 = \1*4 or \1*6 = larger number to multiply by; \15 = \14 - 1 )
            \2\1{3}
            (?=(
                (?=.*$\13)
            |
                \1\1
            ))\16
        ))+$
    )
    \8                           (?# \8 = smaller number to multiply by )
    (
        \15
        (?!\14+$)
    )+
|
    xx?x?|(x{8}|)(x{5}\18?)?     (?# the Fibonacci numbers 0, 1, 2, 3, 5, 8, 13, 21 cannot be handled by our main algorithm, so match them here )
)$
