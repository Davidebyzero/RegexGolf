(?# Match Fibonacci numbers in the domain ^x*$ using only the ECMAScript subset of regex functionality )

^(?:
    (?=
        (x(x+?))                       (?# \1 = potential number for which \1 * \1 * 5 plus or minus 4 is a perfect square;
                                           this is true iff \1 is a Fibonacci number. Outside the surrounding lookahead block,
                                           \1 is guaranteed to be the largest number for which this is true such that
                                           \1 * \1 * 5 + 4 fits into the main number. \2 = \1 - 1 )
        (?=
            (?=\1*(.*))\3\1*
            (\1\2+$)                   (?# \4 = result of multiplying \1 * \1 )
        )
        (?# leave a leftover number equalling \4 * 5 plus or minus 4, on which the next test will be done )
        (?=\4{5} x{4} (.*))\5          (?# \5 will be reused later to recreate the same leftover )
        (?=\5)                         (?# this allows the lazy quantifier on \2 to work, and results in a huge speed optimization )
        (|x{4})\6                      (?# \6 = parity - is determined by whether the index of Fibonacci number \1 is odd or even )
        (?# require that the current leftover number is a perfect square)
        (x(x*))(?=\7*$)                (?# \7 = potential square root, which will be the square root outside the surrounding lookahead; \8 = \7-1 )
        (?:
            \8
            (?!\7+$)
        )+$
    )
    (?=\1\5 xx \6(x*)(\9 x?))          (?# \9 = arithmetic mean of \1*\1*5 and \7*\7, divided by 2; \10 = the other half, including remainder )
    (?=
        .*(?=\7+$)\7*
        (\1\8+$)                       (?# \11 = result of multiplying \7 * \1, where \7 is larger )
    )
    (?=.*(?=\11)(x*)\12)               (?# \12 = \11 / 2; the remainder will always be the same as it is in \10, because \7 is odd iff \1 is odd )
    \10\11
    (
        \9\11
    |
        \12
    )
|
    xx?x?|(x{8}|)(x{5}\14?)?           (?# the Fibonacci numbers 0, 1, 2, 3, 5, 8, 13, 21 cannot be handled by our main algorithm, so match them here )
)$
