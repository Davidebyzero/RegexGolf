(?# Match correct multiplication statements in the domain ^x+\*x+=x+$ using only the ECMAScript subset of regex functionality )
(?# A = first factor; B = second factor; P = number we're testing as the potential product of A and B )

^
(?=
    (x*)\*?(x*)\*?\1=   (?# \1 = the smaller of A and B; \1\2 = the larger of A and B )
    \1\2                (?# assert that A and B must both be <= P )
)
(?!
    (?# Our negative-lookahead statement here is: there does not exist a prime factor of either A or B for which the corresponding
        largest prime power factor of P is not equal to the product of the corresponding prime power factors of A and B. )
    (?# Iterate \3 through all the prime factors possessed by A or B )
    (?:|.+\*)(xx+)\3*\b.*=(?!.*(?=\3$)(xx+)\4+$)
    (?=.*(?=\1\2$)((?=\3+$|x$)|(\3+|x) \6*(?= \6$))(?!((x+)(?= \8+$)x+) \7*(?! \8+$) \7$)(x+$))  (?#  \9 = the largest power of \3 that is a factor of the larger  of A and B )
    (?=.*(?=\1  $)((?=\3+$|x$)|(\3+|x)\11*(?=\11$))(?!((x+)(?=\13+$)x+)\12*(?!\13+$)\12$)(x+$))  (?# \14 = the largest power of \3 that is a factor of the smaller of A and B )
    (?=           ((?=\3+$|x$)|(\3+|x)\16*(?=\16$))(?!((x+)(?=\18+$)x+)\17*(?!\18+$)\17$)(x+$))  (?# \19 = the largest power of \3 that is a factor of P )
    (
        (?!.*(?=\19$)(?=\9)\14)   (?# \19 must be >= both \9 and \14 if P is the product of A and B; and without this check, the test below could give a false positive )
    |
        (?# Now we need to test if \9 * \14 == \19. To do this, we divide both \9 and \19 by \3, in a loop, until one of them equals 1, and then test to see if
            the resulting divided-down \19 is equal to \14. To do this we will need to encode \9 and \19 into a single number, \9 + \19, which must fit into P
            as a temporary variable so that we can operate on it. )
        (?# This algorithm would fail in the case that A, B, and P are all prime powers of the same prime, because \1\2 + P > P, and equivalently, \9 + \19 > P.
            So, just in this case we're in that situation, pre-divide \9 and \19 by \3 before going into the loop, unless one of them is 1. )
        (?=.*(?= \9$)(          x$ | (x+)(?=\22+$) ))  (?# \21 = \9==1 ?  \9 :  \9 / \3;  the division by \3 is implicit )
        (?=.*(?=\19$)( x*(?=\9$)x$ | (x+)(?=\24+$) ))  (?# \23 = \9==1 ? \19 : \19 / \3;  the division by \3 is implicit )
        (?# So that we can operate on both \21 and \23 in a loop -- which in a regex can only change the value of one number every iteration, and only in the direction of subtracting
            from it or keeping it the same -- encode it into a single number, as \21 + \23. This is unambiguous; if a number is the sum of two prime powers of the same prime, there is
            only one unique pair of prime powers of that prime that will have that sum. )
        (?!
            .*(?=\21\23$)
            (?=     (?# This loop must be executed inside a lookahead to make it atomic, so that the regex engine won't backtrack to an earlier iteration of the loop, which results in some false positives. )
				(
					(
						(?# The first thing we need to do every iteration is decode the current number back into two prime powers, \27 and \30, where \27 is the smaller one, if they are different )
						(?=(x+?)(?!((x+)(?=\29+$)x+)\28*(?!\29+$)\28$)(\3+|x)$)
						(
							(?=.*(?=\27$)(x+)\32+$)  (?# \32 = \27 divided by its smallest factor, which implicitly must be \3 )
							(?=.*(?=\30$)(x+)\33+$)  (?# \33 = \30 divided by its smallest factor, which implicitly must be \3 )
							.*(?=\32\33$)            (?# return \32 + \33 as the new number to operate on in the next iteration of this loop )
							|                        (?# if either \27 or \30 is 1, then this loop would fail on its first iteration; force it to succeed, so \27 and \30 are captured for use outside the loop )
						)
					)*
				)
			)\25
            \27\14$  (?# The above algorithm culminates here: this tests if after dividing \9 and \19 by \3 repeatedly until one of them is 1, the larger result, \30, equals \14.
                         Implicit is the assumption that the larger result, \30, corresponds to \19. This is guaranteed due to other checks that were done earlier. )
        )
    )
|
    (?# Our negative-lookahead statement here is: there does not exist a prime factor of P that is not also a factor of either A or B. )
    .*=(x*)                              (?# allow the prime factor we find to be P itself )
    (?=\1\2)                             (?# make sure there's room in P for a divisibility test; the only situation in which there isn't room is if A or B is 1, in which case the test isn't needed )
    (?=\34*(?=\34$|x+$\34)(x?x+?)\35*$)  (?# \35 = a prime factor of P )
    (?!.*(?=\1\2?$)\35+$)                (?# return a non-match if \35 is not a factor of either A or B )
)