(?# Match factorial numbers in the domain ^x*$ )
^
(?=
	(?*(x(x*)))                         (?# \1 = conjectured for which \1! == tail; \2 = \1-1 )
	(?!
		(?*.*(?=\1$)(x+))               (?# \3 = any number <= \1 )
		(?!\3+$)                        (?# there is no \3 that doesn't divide tail )
	)
	(
		(?=
			(?=(x(x(x*?)))\5+$)         (?# \5 = smallest prime factor; \6 = \5-1; \7 = \6-1 )
			(?*(x(x+)))                 (?# \8 = largest prime power factor corresponding to \5; \9 = \8-1 )
			\8*(?=\8$)
			(?# Assert that there is no prime \11 that divides \8 and isn't equal to \5, and that it's also not true that \8 is prime and isn't equal to \5)
			(?!
				((xx+)\11*(?=\11$))?
				(?!(xx+)\12+$|\5$)
			)
		)
		(?=
			.*?(?!\1.)
			(                           (?# \13 = largest power of \5 less than or greater than \1 )
				(                       (?# Assert that tail is a power of \5 )
					(?=                 (?# Divide: \15 = tail / \5, with \16 = \15-1 )
						(x(x*))
						(?=\15*$)       (?# Testing for divisibility by \6 here isn't necessary, as tail is a power of \5 )
						(\6\16+$)       (?# \17 = tool to make the tail equal \15 )
					)\17
				)*x$
			)
		)
		(?=
			.*(?=\8\13$)                                    (?# Seed the loop )
			(
				(?# The first thing we need to do every iteration is decode the current number back into two prime powers,
					\19 and \23, where \19 is the smaller one, if they are different )
				(?=
					(x(x*?))                                (?# \19 = smaller prime power; \20 = \19-1 )
					(?!((x+)(?=\22+$)x+)\21*(?!\22+$)\21$)  (?# Assert that tail is a prime power)
					(\5+|x)$                                (?# \23 = larger prime power )
				)
				(?=
					.*?(?!\1.)                              (?# discard the remainder )
					(?=\19*$)                               (?# discard the remainder )
					(x(x*))                                 (?# \24 = floor{\1 / \19}; \25 = \24-1 )
					(?=\24*$)
					(?=\20+$)
					\20\25*$
				)
				(?# construct \5 ^ \24 by taking logarithm in base \5 and matching it against \24 )
				(?=
					.*
					(?=
						(                                   (?# Assert that tail is a power of \5 )
							(?=                             (?# Divide: \27 = tail / \5, with \28 = \27-1 )
								(x(x*))
								(?=\27*$)                   (?# Testing for divisibility by \6 here isn't necessary, as tail is a power of \5 )
								(\6\28+$)                   (?# \29 = tool to make the tail equal \27 )
							)\29
						)*x$
					)
					(?=x(x*))                               (?# tail will be \5 ^ \24; \30 = tail-1 )
					(?=(x*)\31(x?))                         (?# \31 = floor{tail / 2}, \32\31 = ceil{tail / 2}, \32 = tail % 2 )
					(?=
						(                                       (?# \33 = logarithm in base \5 of tail )
							x                                   (?# seed the loop )
							(?=
								(
									(?=
										(x*)\32(?=\31)          (?# tail = \31;  \35 = tool for decoding current state )
										\35                     (?# tail = current encoded state )
										(x*?)                   (?# \36 = iteration count )
										(?=
											(                   (?# Assert that tail is a power of \5 )
												(?=             (?# Divide: \38 = tail / \5, with \39 = \38-1 )
													(x(x*))
													(?=\38*$)   (?# Testing for divisibility by \6 here isn't necessary, as tail is a power of \5 )
													(\6\39+$)   (?# \40 = tool to make the tail equal \38 )
												)\40
											)*x$
										)
										(x(x*))                 (?# \41 = tail = A ^ {iteration count + 1}; \42 = \41-1 )
									)
									(?# encode state for next loop iteration, so that \36 will be incremented and \41 will be doubled )
									(?=
										(?# commence multiplication of \41 * \6; since we don't know which
											of \6 and \41 is larger/smaller, do two symmetric tests )
										.*
										(?=\41*$)
										(?= \6*$)
										(?=\41\7+$)
										(  \6\42+$)             (?# \43 = \41 * \6 )
									)
									x\43                        (?# tail -= \41 * \6 + 1 )
								)+
							)
							x\36                                (?# Return logarithm in base A of B )
						|                                       (?# The main algorithm can't handle B<=A, so handle that below )
							x?\B                                (?# If B>1 return a value of 1, otherwise return a value of 0 )
						)
					)
					.*(?=\33$)\24$                          (?# Assert that \33, the logarithm, equals \24 )
				)
				(?=
					.*(?=\23$)
					(x(x*))                               (?# \44 = \23 / {\30+1 == \5^\24}; \45 = \44-1 )
					(?=\44*$)                             (?# Testing for divisibility by \30 here isn't necessary, as dividend and divisor are both powers of \5 )
					\30\45*$
				)
				(?=
					.*(?=\19$)
					(x(x*))                               (?# \46 = \19 / \5; \47 = \46-1 )
					(?=\46*$)                             (?# Testing for divisibility by \6 here isn't necessary, as tail is a power of \5 )
					\6\47*$
				)
				.*(?=\44\46$)
			)*
			xx$
		)
		(?=
			(x(x*))                           (?# \48 = tail / \8; \49 = \46-1 )
			(?=\48*$)
			(?=\9+$)
			(\9\49*$)                         (?# \50 = tool for making tail equal \48 )
		)\50
	)*
	(?!\1.)                                   (?# Assert that the remaining factor is <= \1 )
	(?!(xx+)\51+$)                            (?# Assert that the remaining factor is prime )
)
\1