(?# Giving an input number N in the domain ^x*$, this regex returns floor{N / sqrt{2}} )
(?=
    (x(x*))                    (?# \1 = will be the square root of the main number, rounded down; \2 = \1 - 1 )
    (x)*(?=\1*$)               (?# \3 = tool to round up instead of down )
    \2+$
)

(?# Step 1: Calculate N*N in base ceil{sqrt{N}} )

(?=(\1\3)*(x?(x*)))            (?# \4 = \1 + \3 = ceil{sqrt{N}}, the number base to work in; \5 = N % \4; \6 = \5-1, or 0 if \5==0 )
(?=
	\5
	(x(x*))                    (?# \7 = floor{N / \4}; \8 = \7-1 )
	(?=\7*$)
	(?=(\2\3)+$)               (?# \9 = \4 - 1 )
	\9\8*$
)
(?=
	.*
	(                          (?# \10 = \5 * \7; must do symmetric multiplication, because \5 is occasionally 1 larger than \7 )
		(?=\5*$)
		(?=\7*$)
		(?=\5\8+$)
		   \7\6+$
	|
		$\5                    (?# must make a special case for \5==0, because \7 might not be 0 )
	)
)
(?=
	.*
	(?=
		(?=\5*$)               (?# tail = \5 * \5 )
		\5\6+$
	)
	(x*?)(?=\4*$)              (?# \11 = {\5 * \5} % \4, the base-\4 digit in place 0 of the result for N*N )
	(x?(x*))                   (?# \12 = floor{{\5 * \5} / \4}; \13 = \12-1, or 0 if \12==0 )
	(?=\12*$)
	(
		(?=\9+$)
		\9\13*$
	|
		$\12                   (?# must make a special case for \12==0, because \9 is nonzero )
	)
)
(?=
	.*(?=\10$)
	(x*?)(?=\4*$)              (?# \15 = \10 % \4 )
	(x?(x*))                   (?# \16 = floor{\10 / \4}; \17 = \16-1, or 0 if \16==0 )
	(?=\16*$)
	(
		(?=\9+$)
		\9\17*$
	|
		$\16                   (?# must make a special case for \16==0, because \9 is nonzero )
	)
)
(?=
	.*(?=\15\15\12$)           (?# tail = 2 * \15 + \12 )
	(x*?)(?=\4*$)              (?# \19 = {2 * \15 + \12} % \4, the base-\4 digit in place 1 of the result for N*N )
	(x?(x*))                   (?# \20 = floor{{2 * \15 + \12} / \4}; \21 = \20-1, or 0 if \20==0 )
	(?=\20*$)
	(
		(?=\9+$)
		\9\21*$
	|
		$\20                   (?# must make a special case for \20==0, because \9 is nonzero )
	)
)                              (?# {\7*\7 + 2*\16 + \20} = the base-\4 digit in place 2 of the result for N*N, which is allowed to exceed \4 and will always do so;
                                   Note that it will be equal to N iff N is a perfect square, because of the choice of number base. )

(?# Step 2: Find the largest M such that 2*M*M is not greater than N*N )

(?*(x*))                       (?# \23 = M )

(?# Step 2a: Calculate M*M in base \4 )
(?=
	.*(?=\23$)
	(?=\4*(x?(x*)))\24         (?# \24 = M % \4; \25 = \24-1, or 0 if \24==0 )
	(x(x*))                    (?# \26 = floor{M / \4}; \27 = \26-1 )
	(?=\26*$)
	(?=\9+$)
	\9\27*$
)
(?=
	.*
	(                          (?# \28 = \24 * \26; must do symmetric multiplication, because \24 is occasionally 1 larger than \26 )
		(?=\24*$)
		(?=\26*$)
		(?=\24\27+$)
		   \26\25+$
	|
		$\24                   (?# must make a special case for \24==0, because \26 might not be 0 )
	)
)
(?=
	.*
	(?=\26*$)
	(\26\27+$)                 (?# \29 = \26 * \26 )
)
(?=
	.*
	(?=
		(?=\24*$)              (?# tail = \24 * \24 )
		\24\25+$
	)
	(x*?)(?=\4*$)              (?# \30 = {\24 * \24} % \4, the base-\4 digit in place 0 of the result for M*M )
	(x?(x*))                   (?# \31 = floor{{\24 * \24} / \4}; \32 = \31-1, or 0 if \31==0 )
	(?=\31*$)
	(
		(?=\9+$)
		\9\32*$
	|
		$\31                   (?# must make a special case for \31==0, because \9 is nonzero )
	)
)
(?=
	.*(?=\28$)
	(x*?)(?=\4*$)              (?# \34 = \28 % \4 )
	(x?(x*))                   (?# \35 = floor{\28 / \4}; \36 = \35-1, or 0 if \35==0 )
	(?=\35*$)
	(
		(?=\9+$)
		\9\36*$
	|
		$\35                   (?# must make a special case for \35==0, because \9 is nonzero )
	)
)
(?=
	.*(?=\34\34\31$)           (?# tail = 2 * \34 + \31 )
	(x*?)(?=\4*$)              (?# \38 = {2 * \34 + \31} % \4, the base-\4 digit in place 1 of the result for M*M )
	(x?(x*))                   (?# \39 = floor{{2 * \34 + \31} / \4}; \40 = \39-1, or 0 if \39==0 )
	(?=\39*$)
	(
		(?=\9+$)
		\9\40*$
	|
		$\39                   (?# must make a special case for \39==0, because \9 is nonzero )
	)
)                              (?# {\29 + 2*\35 + \39} = the base-\4 digit in place 2 of the result for M*M, which is allowed to exceed \4 and will always do so )

(?# Step 2b: Calculate 2*M*M in base \4 )
(?=
	(?=(\30\30))               (?# \42 = 2*\30 )
	.*(?=\4$)
	(x\42|)                    (?# \43 = \42+1 if it fits in a base \4 digit, or 0 otherwise )
)
(?=
	.*(?=\42)
	\4*(x*)                    (?# \44 = \42 % \4, the base-\4 digit in place 0 of the result for 2*M*M )
)
(?=  
	(                          (?# \45 = 2*\38 + {\42 / \4} )
		\38\38
		(
			(?!.*$\43)
		|
			(?=.*$\43)x
		)
	)
)
(?=
	.*(?=\4$)
	(x\45|)                    (?# \47 = \45+1 if it fits in a base \4 digit, or 0 otherwise )
)
(?=
	.*(?=\45)
	\4*(x*)                    (?# \48 = \45 % \4, the base-\4 digit in place 1 of the result for 2*M*M )
)
(?=
	(                          (?# \49 = 2*{\29 + 2*\35 + \39} + {\45 / 3}, the base-\4 digit in place 2 of the result for 2*M*M, which is allowed to exceed \4 and will always do so )
		(\29\35\35\39){2}
		(
			(?!.*$\47)
		|
			(?=.*$\47)x
		)
	)
)

(?# Step 2c: Require that 2*M*M <= N*N )

(?=
	(?=
		(.*)                   (?# \52 )
		\16\16\20
		(?=\7*$)               (?# tail = \7 * \7 )
		\7\8+$
	)
	\52                        (?# tail = {\7*\7 + 2*\16 + \20}; we can do this unconditionally because our digits in place 2 are always greater than those in places 0..1 )
	(
		x\49
	|
		(?=\49$)
		(?=
			.*(?=\19$)x\48
		|
			(?=
				.*(?=\19$)\48$
			)
			(?=
				.*(?=\11$)\44
			)
		)
	)
)

\23

|x(?=x)|                       (?# handle inputs in the domain ^x{0,2}$ )