(?# Giving an input number N in the domain ^x*$, this regex returns floor{N / sqrt{2}} )
(?=
    (x(x*))                    (?# \1 = will be the square root of the main number, rounded down; \2 = \1 - 1 )
    (x)*(?=\1*$)               (?# \3 = tool to round up instead of down )
    \2+$
)

(?# Step 1: Calculate N*N in base ceil{sqrt{N}} )

(?=(x(\2\3))*(x?(x*)))         (?# \4 = \1 + \3 = ceil{sqrt{N}}, the number base to work in; \5 = \4-1; \6 = N % \4; \7 = \6-1, or 0 if \6==0 )
(?=
	\6
	(x(x*))                    (?# \8 = floor{N / \4}; \9 = \8-1 )
	(?=\8*$)                   (?# we can skip the test for divisibility by \5 because it's guaranteed that \5 <= \8 )
	\5\9*$
)
(?=
	.*
	(?=
		(?=\6*$)               (?# tail = \6 * \6 )
		\6\7+$
	)
	(x*?)(?=\4*$)              (?# \10 =       {\6 * \6} % \4, the base-\4 digit in place 0 of the result for N*N )
	(x?(x*))                   (?# \11 = floor{{\6 * \6} / \4}; \12 = \11-1, or 0 if \11==0 )
	(?=\11*$)
	(
		(?=\5+$)
		\5\12*$
	|
		$\11                   (?# must make a special case for \11==0, because \5 is nonzero )
	)
)
(?=
	.*
	(?=
		(?=\6*$)               (?# tail = \6 * \8; must do symmetric multiplication, because \6 is occasionally 1 larger than \8 )
		(?=\8*$)
		(?=\6\9+$)
		   \8\7+$
	|
		$\6                    (?# must make a special case for \6==0, because \8 might not be 0 )
	)
	(x*?)(?=\4*$)              (?# \14 =       {\6 * \8} % \4 )
	(x?(x*))                   (?# \15 = floor{{\6 * \8} / \4}; \16 = \15-1, or 0 if \15==0 )
	(?=\15*$)
	(
		(?=\5+$)
		\5\16*$
	|
		$\15                   (?# must make a special case for \15==0, because \5 is nonzero )
	)
)
(?=
	.*(?=\14\14\11$)           (?# tail = 2 * \14 + \11 )
	(x*?)(?=\4*$)              (?# \18 =       {2 * \14 + \11} % \4, the base-\4 digit in place 1 of the result for N*N )
	(x?(x*))                   (?# \19 = floor{{2 * \14 + \11} / \4}; \20 = \19-1, or 0 if \19==0 )
	(?=\19*$)
	(
		(?=\5+$)
		\5\20*$
	|
		$\19                   (?# must make a special case for \19==0, because \5 is nonzero )
	)
)                              (?# {\8*\8 + 2*\15 + \19} = the base-\4 digit in place 2 of the result for N*N, which is allowed to exceed \4 and will always do so;
                                   Note that it will be equal to N iff N is a perfect square, because of the choice of number base. )

(?# Step 2: Find the largest M such that 2*M*M is not greater than N*N )

(?*(x*?))                      (?# \22 = N - M )

(?# Step 2a: Calculate M*M in base \4 )
(?=
	\22
	(                          (?# \23 = M )
		(?=\4*(x?(x*)))\24     (?# \24 =       M % \4; \25 = \24-1, or 0 if \24==0 )
		(x(x*))                (?# \26 = floor{M / \4}; \27 = \26-1 )
		(?=\26*$)              (?# we can skip the test for divisibility by \5, but I'm not sure why; TODO: figure out why this is )
		\5\27*$
	)
)
(?=
	.*
	(?=\26*$)
	(\26\27+$)                 (?# \28 = \26 * \26 )
)
(?=
	.*
	(?=
		(?=\24*$)              (?# tail = \24 * \24 )
		\24\25+$
	)
	(x*?)(?=\4*$)              (?# \29 =       {\24 * \24} % \4, the base-\4 digit in place 0 of the result for M*M )
	(x?(x*))                   (?# \30 = floor{{\24 * \24} / \4}; \31 = \30-1, or 0 if \30==0 )
	(?=\30*$)
	(
		(?=\5+$)
		\5\31*$
	|
		$\30                   (?# must make a special case for \30==0, because \5 is nonzero )
	)
)
(?=
	.*
	(?=
		(?=\24*$)              (?# tail = \24 * \26; must do symmetric multiplication, because \24 is occasionally 1 larger than \26 )
		(?=\26*$)
		(?=\24\27+$)
		   \26\25+$
	|
		$\24                   (?# must make a special case for \24==0, because \26 might not be 0 )
	)
	(x*?)(?=\4*$)              (?# \33 =       {\24 * \26} % \4 )
	(x?(x*))                   (?# \34 = floor{{\24 * \26} / \4}; \35 = \34-1, or 0 if \34==0 )
	(?=\34*$)
	(
		(?=\5+$)
		\5\35*$
	|
		$\34                   (?# must make a special case for \34==0, because \5 is nonzero )
	)
)
(?=
	.*(?=\33\33\30$)           (?# tail = 2 * \33 + \30 )
	(x*?)(?=\4*$)              (?# \37 =       {2 * \33 + \30} % \4, the base-\4 digit in place 1 of the result for M*M )
	(x?(x*))                   (?# \38 = floor{{2 * \33 + \30} / \4}; \39 = \38-1, or 0 if \38==0 )
	(?=\38*$)
	(
		(?=\5+$)
		\5\39*$
	|
		$\38                   (?# must make a special case for \38==0, because \5 is nonzero )
	)
)                              (?# {\28 + 2*\34 + \38} = the base-\4 digit in place 2 of the result for M*M, which is allowed to exceed \4 and will always do so )

(?# Step 2b: Calculate 2*M*M in base \4 )
(?=
	.*(?=(\29\29))             (?# \41 = 2*\29; tail = \41 )
	\4*(x*)                    (?# \42 = \41 % \4, the base-\4 digit in place 0 of the result for 2*M*M )
)
(?=  
	(                          (?# \43 = 2*\37 + {\41 / \4} )
		(                      (?# +1 carry if \41 does not fit in a base \4 digit )
			(?=
				.*(?!\41)\5
			)x
		)?
		\37\37
	)
	(.*)                       (?# \45 = tool to make tail = \43 )
)
(?=
	\45                        (?# tail = \43 )
	\4*(x*)                    (?# \46 = \43 % \4, the base-\4 digit in place 1 of the result for 2*M*M )
)
(?=
	(                          (?# \47 = 2*{\28 + 2*\34 + \38} + {\43 / 3}, the base-\4 digit in place 2 of the result for 2*M*M, which is allowed to exceed \4 and will always do so )
		(                      (?# +1 carry if \43 does not fit in a base \4 digit )
			(?=
				.*(?!\43)\5
			)x
		)?
		(\28\34\34\38){2}
	)
)

(?# Step 2c: Require that 2*M*M <= N*N )

(?=
	(?=
		(.*)                   (?# \50 )
		\15\15\19
		(?=\8*$)               (?# tail = \8 * \8 )
		\8\9+$
	)
	\50                        (?# tail = {\8*\8 + 2*\15 + \19}; we can do this unconditionally because our digits in place 2 are always greater than those in places 0..1 )
	(
		x+
	|
		(?=
			.*(?!\18)\46
		|
			(?!.*(?!\42)\10)
			.*(?=\18$)\46$
		)
	)
	\47$
)

\23

|x\B|                          (?# handle inputs in the domain ^x{0,2}$ )