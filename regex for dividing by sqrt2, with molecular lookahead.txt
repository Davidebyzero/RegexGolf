(?# Giving an input number N in the domain ^x*$, this regex returns floor{N / sqrt{2}} )
(?=
    (x(x*))                    (?# \1 = will be the square root of the main number, rounded down; \2 = \1 - 1 )
    (x)*(?=\1*$)               (?# \3 = tool to round up instead of down )
    \2+$
)

(?# Step 1: Calculate N*N in base ceil{sqrt{N}} )

(?=(x(\2\3))*(x?(x*)))         (?# \4 = \1 + \3 = ceil{sqrt{N}}, the number base to work in; \5 = \4-1; \6 = N % \4; \7 = \6-1, or 0 if \6==0 )
(?=
	\6
	(x(x*))                    (?# \8 = floor{N / \4}; \9 = \8-1 )
	(?=\8*$)                   (?# we can skip the test for divisibility by \5 because it's guaranteed that \5 <= \8 )
	\5\9*$
)
(?=
	.*
	(                          (?# \10 = \6 * \8; must do symmetric multiplication, because \6 is occasionally 1 larger than \8 )
		(?=\6*$)
		(?=\8*$)
		(?=\6\9+$)
		   \8\7+$
	|
		$\6                    (?# must make a special case for \6==0, because \8 might not be 0 )
	)
)
(?=
	.*
	(?=
		(?=\6*$)               (?# tail = \6 * \6 )
		\6\7+$
	)
	(x*?)(?=\4*$)              (?# \11 =       {\6 * \6} % \4, the base-\4 digit in place 0 of the result for N*N )
	(x?(x*))                   (?# \12 = floor{{\6 * \6} / \4}; \13 = \12-1, or 0 if \12==0 )
	(?=\12*$)
	(
		(?=\5+$)
		\5\13*$
	|
		$\12                   (?# must make a special case for \12==0, because \5 is nonzero )
	)
)
(?=
	.*(?=\10$)
	(x*?)(?=\4*$)              (?# \15 =       \10 % \4 )
	(x?(x*))                   (?# \16 = floor{\10 / \4}; \17 = \16-1, or 0 if \16==0 )
	(?=\16*$)
	(
		(?=\5+$)
		\5\17*$
	|
		$\16                   (?# must make a special case for \16==0, because \5 is nonzero )
	)
)
(?=
	.*(?=\15\15\12$)           (?# tail = 2 * \15 + \12 )
	(x*?)(?=\4*$)              (?# \19 =       {2 * \15 + \12} % \4, the base-\4 digit in place 1 of the result for N*N )
	(x?(x*))                   (?# \20 = floor{{2 * \15 + \12} / \4}; \21 = \20-1, or 0 if \20==0 )
	(?=\20*$)
	(
		(?=\5+$)
		\5\21*$
	|
		$\20                   (?# must make a special case for \20==0, because \5 is nonzero )
	)
)                              (?# {\8*\8 + 2*\16 + \20} = the base-\4 digit in place 2 of the result for N*N, which is allowed to exceed \4 and will always do so;
                                   Note that it will be equal to N iff N is a perfect square, because of the choice of number base. )

(?# Step 2: Find the largest M such that 2*M*M is not greater than N*N )

(?*(x*?))                      (?# \23 = N - M )

(?# Step 2a: Calculate M*M in base \4 )
(?=
	\23
	(                          (?# \24 = M )
		(?=\4*(x?(x*)))\25     (?# \25 =       M % \4; \26 = \25-1, or 0 if \25==0 )
		(x(x*))                (?# \27 = floor{M / \4}; \28 = \27-1 )
		(?=\27*$)              (?# we can skip the test for divisibility by \5, but I'm not sure why; TODO: figure out why this is )
		\5\28*$
	)
)
(?=
	.*
	(                          (?# \29 = \25 * \27; must do symmetric multiplication, because \25 is occasionally 1 larger than \27 )
		(?=\25*$)
		(?=\27*$)
		(?=\25\28+$)
		   \27\26+$
	|
		$\25                   (?# must make a special case for \25==0, because \27 might not be 0 )
	)
)
(?=
	.*
	(?=\27*$)
	(\27\28+$)                 (?# \30 = \27 * \27 )
)
(?=
	.*
	(?=
		(?=\25*$)              (?# tail = \25 * \25 )
		\25\26+$
	)
	(x*?)(?=\4*$)              (?# \31 =       {\25 * \25} % \4, the base-\4 digit in place 0 of the result for M*M )
	(x?(x*))                   (?# \32 = floor{{\25 * \25} / \4}; \33 = \32-1, or 0 if \32==0 )
	(?=\32*$)
	(
		(?=\5+$)
		\5\33*$
	|
		$\32                   (?# must make a special case for \32==0, because \5 is nonzero )
	)
)
(?=
	.*(?=\29$)
	(x*?)(?=\4*$)              (?# \35 =       \29 % \4 )
	(x?(x*))                   (?# \36 = floor{\29 / \4}; \37 = \36-1, or 0 if \36==0 )
	(?=\36*$)
	(
		(?=\5+$)
		\5\37*$
	|
		$\36                   (?# must make a special case for \36==0, because \5 is nonzero )
	)
)
(?=
	.*(?=\35\35\32$)           (?# tail = 2 * \35 + \32 )
	(x*?)(?=\4*$)              (?# \39 =       {2 * \35 + \32} % \4, the base-\4 digit in place 1 of the result for M*M )
	(x?(x*))                   (?# \40 = floor{{2 * \35 + \32} / \4}; \41 = \40-1, or 0 if \40==0 )
	(?=\40*$)
	(
		(?=\5+$)
		\5\41*$
	|
		$\40                   (?# must make a special case for \40==0, because \5 is nonzero )
	)
)                              (?# {\30 + 2*\36 + \40} = the base-\4 digit in place 2 of the result for M*M, which is allowed to exceed \4 and will always do so )

(?# Step 2b: Calculate 2*M*M in base \4 )
(?=
	.*(?=(\31\31))             (?# \43 = 2*\31; tail = \43 )
	\4*(x*)                    (?# \44 = \43 % \4, the base-\4 digit in place 0 of the result for 2*M*M )
)
(?=  
	(                          (?# \45 = 2*\39 + {\43 / \4} )
		(                      (?# +1 carry if \43 does not fit in a base \4 digit )
			(?=
				.*(?!\43)\5
			)x
		)?
		\39\39
	)
)
(?=
	.*(?=\45)
	\4*(x*)                    (?# \47 = \45 % \4, the base-\4 digit in place 1 of the result for 2*M*M )
)
(?=
	(                          (?# \48 = 2*{\30 + 2*\36 + \40} + {\45 / 3}, the base-\4 digit in place 2 of the result for 2*M*M, which is allowed to exceed \4 and will always do so )
		(                      (?# +1 carry if \45 does not fit in a base \4 digit )
			(?=
				.*(?!\45)\5
			)x
		)?
		(\30\36\36\40){2}
	)
)

(?# Step 2c: Require that 2*M*M <= N*N )

(?=
	(?=
		(.*)                   (?# \51 )
		\16\16\20
		(?=\8*$)               (?# tail = \8 * \8 )
		\8\9+$
	)
	\51                        (?# tail = {\8*\8 + 2*\16 + \20}; we can do this unconditionally because our digits in place 2 are always greater than those in places 0..1 )
	(
		x\48
	|
		(?=\48$)
		(?=
			.*(?!\19)\47
		|
			(?=
				.*(?=\19$)\47$
			)
			(?=
				.*(?=\11$)\44
			)
		)
	)
)

\24

|x\B|                          (?# handle inputs in the domain ^x{0,2}$ )