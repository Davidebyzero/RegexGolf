# Match Fibonacci numbers in the domain ^x*$ using only the ECMAScript subset of regex functionality

^                               # N = tail
(?=
    (?=
        .*?                     # find the largest tail <= N that satisfies the following requirements
        (?=
            # assert that tail is a perfect square, and take its square root
            (?=
                (x(x+))         # \1 = sqrt(tail); \2 = \1 - 1; assert \1 >= 2, because the below algorithm fails with smaller values
                (?=
                    (\1*)\2+$   # iff \1 * \1 == our number, then the first match here must result in \3 == 0
                )
                \1*$\3          # test for divisibility by \1 and for \3 == 0 simultaneously
            )
            # tail = (tail Â± 4) / 5
            (x*)\4{3}           # \4 = floor(tail / 5); tail = \4 + (tail % 5)
            (?=\4(x|(x{4}))$)   # \6 = 4 if we had tail % 5 == 4 before the division, or unset (0) otherwise
            \6
            # assert that tail is a perfect square, and take its square root
            (                   # \7 = tail
                (x(x*))         # \8 = sqrt(tail); \9 = \8 - 1
                (?=
                    (\8*)\9+$   # iff \8 * \8 == our number, then the first match here must result in \10 == 0
                )
                \8*$\10         # test for divisibility by \8 and for \10 == 0 simultaneously
            )
        )
        # At this point, \1 = the Lucas number L_n, and \8 = the Fibonacci number F_n
        \1*                     # tail = the minimum multiple of \1 for which the following matches
        (?=(\8\2+$))            # \11 = F_{2n} = F_n*L_n = \8 * \1
        \1*                     # tail = the minimum multiple of \1 with which the following will evaluate = \1
        \8(x(x*))\12            # \12 = F_{n-1} = (L_n-F_n)/2 = (\1 - \8) / 2; \13 = \12-1
    )
    .*
    (                           # \14 = F_{2n+1} = F_{2n} + F_{2n-1} = F_{2n} + (F_{n-1}*F_{n-1} + F_n*F_n) = \11 + (\8*\8 + \12*\12) = \11 + (\7 + \12*\12)
        \11\7
        (?=\12+$)
        \12\13+$                # \12 * \12
    )
|                               # Allow everything above to be skipped, resulting in all
                                # capture groups being unset.
)
(
    # Note that if the above was skipped using the empty alternative in the lookahead,
    # the following will evaluate to 0. This relies on ECMAScript NPCG behavior.
    \11                         # head = F_{2n} = \11
    \14                         # head = F_{2n+2} = F_{2n}   + F_{2n+1} = head + \14
    \14?                        # head = F_{2n+3} = F_{2n+2} + F_{2n+1} = head + \14, optionally
|
    xx?x?|x{5}|x{8}             # the Fibonacci numbers 1, 2, 3, 5, 8 cannot be handled by our main algorithm, so match them here
)$