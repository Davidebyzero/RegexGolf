# Match Fibonacci numbers in the domain ^x*$ using only the ECMAScript subset of regex functionality

^                               # N = tail
(
    (?=
        .*?                     # find the largest tail <= N that satisfies the following requirements
        (?=
            # assert that tail is a perfect square, and take its square root
            (?=
                (x(x+))         # \2 = sqrt(tail); \3 = \2 - 1; assert \2 >= 2, because the below algorithm fails with smaller values
                (?=
                    (\2*)\3+$   # iff \2 * \2 == our number, then the first match here must result in \4 == 0
                )
                \2*$\4          # test for divisibility by \2 and for \4 == 0 simultaneously
            )
            # tail = (tail Â± 4) / 5
            (x*)\5{3}           # \5 = floor(tail / 5); tail = \5 + (tail % 5)
            (?=\5(x|(x{4}))$)   # \7 = 4 if we had tail % 5 == 4 before the division, or unset (0) otherwise
            \7
            # assert that tail is a perfect square, and take its square root
            (                   # \8 = tail
                (x(x*))         # \9 = sqrt(tail); \10 = \9 - 1
                (?=
                    (\9*)\10+$  # iff \9 * \9 == our number, then the first match here must result in \11 == 0
                )
                \9*$\11         # test for divisibility by \9 and for \11 == 0 simultaneously
            )
        )
        # At this point, \2 = the Lucas number L_n, and \9 = the Fibonacci number F_n
        \2*                     # tail = the minimum multiple of \2 for which the following matches
        (?=(\9\3+$))            # \12 = F_{2n} = F_n*L_n = \9 * \2
        \2*                     # tail = the minimum multiple of \2 with which the following will evaluate = \2
        \9(x(x*))\13            # \13 = F_{n-1} = (L_n-F_n)/2 = (\2 - \9) / 2; \14 = \13-1
    )
    (?=
        .*
        (                       # \15 = F_{2n+1} = F_{2n} + F_{2n-1} = F_{2n} + (F_{n-1}*F_{n-1} + F_n*F_n) = \12 + (\9*\9 + \13*\13) = \12 + (\8 + \13*\13)
            \12\8
            (?=\13+$)
            \13\14+$            # \13 * \13
        )
    )
    \12                         # head = F_{2n} = \12
    \15                         # head = F_{2n+2} = F_{2n}   + F_{2n+1} = head + \15
    \15?                        # head = F_{2n+3} = F_{2n+2} + F_{2n+1} = head + \15, optionally
|
    x{0,3}|x{5}|x{8}            # the Fibonacci numbers 0, 1, 2, 3, 5, 8 cannot be handled by our main algorithm, so match them here
)$